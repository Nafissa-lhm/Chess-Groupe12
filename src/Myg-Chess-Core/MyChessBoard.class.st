'From Pharo13.1.0SNAPSHOT of 20 October 2025 [Build information: Pharo-13.1.0+SNAPSHOT.build.707.sha.0d6f109a1a2d906ac9f69ca41e56c022b584bdfd (64 Bit)] on 29 October 2025 at 5:16:24.002 pm'!BlElement subclass: #MyChessBoard	instanceVariableNames: 'squareMatrix grid selected state whiteColor blackColor game'	classVariableNames: ''	package: 'Myg-Chess-Core'!!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-29T17:11:32.232+01:00'!at: coordinate"remplacer nil par MyChessEmtyPiece new"	^ grid at: coordinate ifAbsent: nil! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:21.961+01:00'!at: aString ifAbsent: aFullBlockClosure	^ grid at: aString ifAbsent: aFullBlockClosure! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:21.964+01:00'!at: coordinate put: aPiece	| square |	square := grid at: coordinate.	square contents: aPiece.	aPiece square: square! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:21.967+01:00'!blackColor	^ blackColor! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:21.967+01:00'!blackColor: anObject	blackColor := anObject! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:21.969+01:00'!game	^ game! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:21.969+01:00'!game: aGame	game := aGame! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-29T17:15:49.85+01:00'!pieces		^ children collect: [ :square | square contents ]     select: [ :piece | piece isOccupied ]! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.005+01:00'!select: aSquare 		state select: aSquare! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.007+01:00'!selected: aMyChessSquare 		selected := aMyChessSquare! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.009+01:00'!whiteColor	^ whiteColor! !!MyChessBoard methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.01+01:00'!whiteColor: anObject	whiteColor := anObject! !!MyChessBoard methodsFor: 'event handling' stamp: '2025-10-27T22:00:21.968+01:00'!click: aMyChessSquare 		state := state clickOn: aMyChessSquare! !!MyChessBoard methodsFor: 'highlighting' stamp: '2025-10-27T22:00:21.97+01:00'!highLightTargets: squares	squares do: [ :sq | sq ifNotNil: #highlightTarget ]! !!MyChessBoard methodsFor: 'highlighting' stamp: '2025-10-27T22:00:22.008+01:00'!unhighLightTargets: squares	squares do: [ :sq | sq ifNotNil: #unhighlightTarget ]! !!MyChessBoard methodsFor: 'initialization' stamp: '2025-10-27T22:00:21.973+01:00'!initialize	super initialize.	self blackColor: Color blue.	self whiteColor: Color orange.	state := MyUnselectedState board: self.	grid := Dictionary new.	self background: (BlBackground paint: Color veryVeryLightGray).	self layout: (BlGridLayout vertical			 cellSpacing: 5;			 columnCount: 8;			 rowCount: 8;			 yourself).	self constraintsDo: [ :aLayoutConstraints |		aLayoutConstraints horizontal fitContent.		aLayoutConstraints vertical fitContent ].	self initializeSquares! !!MyChessBoard methodsFor: 'initialization' stamp: '2025-10-27T22:00:21.979+01:00'!initializeFromFENBoard: aFENBoard	aFENBoard keysAndValuesDo: [ :k :v |		v ~= 'empty' ifTrue: [			| substrings color piece |			substrings := v substrings.			color := substrings first.			piece := substrings second.			self				at: k				put:					((self class environment at: ('My' , piece capitalized) asSymbol)						 perform: color asLowercase asSymbol) ] ]! !!MyChessBoard methodsFor: 'initialization' stamp: '2025-10-27T22:00:22.001+01:00'!initializePieces	| black |	black := false.	$a asciiValue to: $h asciiValue do: [ :column |		8 to: 1 by: -1 do: [ :file |			| squareNotation square |			squareNotation := column asCharacter asString , file asString.			square := black				          ifTrue: [					          black := false.					          MyChessSquare basicNew						          color: Color black;						          board: self;						          initialize;						          yourself ]				          ifFalse: [					          black := true.					          MyChessSquare basicNew						          color: Color white;						          board: self;						          initialize;						          yourself ].			square name: squareNotation.			grid at: squareNotation put: square.			self addChild: square ].		black := black not ].	self at: 'a1' put: MyRook white.	self at: 'b1' put: MyKnight white.	self at: 'c1' put: MyBishop white.	self at: 'd1' put: MyQueen white.	self at: 'e1' put: MyKing white.	self at: 'f1' put: MyBishop white.	self at: 'g1' put: MyKnight white.	self at: 'h1' put: MyRook white.	$a asciiValue to: $h asciiValue do: [ :column |		self at: column asCharacter asString , '2' put: MyPawn white ].	self at: 'a8' put: MyRook black.	self at: 'b8' put: MyKnight black.	self at: 'c8' put: MyBishop black.	self at: 'd8' put: MyQueen black.	self at: 'e8' put: MyKing black.	self at: 'f8' put: MyBishop black.	self at: 'g8' put: MyKnight black.	self at: 'h8' put: MyRook black.	$a asciiValue to: $h asciiValue do: [ :column |		self at: column asCharacter asString , '7' put: MyPawn black ]! !!MyChessBoard methodsFor: 'initialization' stamp: '2025-10-27T22:00:22.004+01:00'!initializeSquares	| black |	black := false.	$a asciiValue to: $h asciiValue do: [ :column |		8 to: 1 by: -1 do: [ :file |			| squareNotation square |			squareNotation := column asCharacter asString , file asString.			square := black				          ifTrue: [					          black := false.					          MyChessSquare basicNew						          color: Color black;						          board: self;						          initialize;						          contents: nil;						          yourself ]				          ifFalse: [					          black := true.					          MyChessSquare basicNew						          color: Color white;						          board: self;						          initialize;						          contents: nil;						          yourself ].			square name: squareNotation.			grid at: squareNotation put: square.			self addChild: square ].		black := black not ]! !!MyChessBoard methodsFor: 'selection' stamp: '2025-10-27T22:00:22.009+01:00'!unselectSelected		selected ifNil: [ ^ self ].	selected doUnselect! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyChessBoard class	instanceVariableNames: ''!!MyChessBoard class methodsFor: 'instance creation' stamp: '2025-10-27T22:00:21.949+01:00'!empty	^ super new! !!MyChessBoard class methodsFor: 'instance creation' stamp: '2025-10-27T22:00:21.955+01:00'!fromFENBoard: aFENBoard	^ super new		  initializeFromFENBoard: aFENBoard;		  yourself! !!MyChessBoard class methodsFor: 'instance creation' stamp: '2025-10-27T22:00:21.956+01:00'!new	self error: 'Please use the other constructors'! !