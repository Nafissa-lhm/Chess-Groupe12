'From Pharo13.1.0SNAPSHOT of 20 October 2025 [Build information: Pharo-13.1.0+SNAPSHOT.build.707.sha.0d6f109a1a2d906ac9f69ca41e56c022b584bdfd (64 Bit)] on 29 October 2025 at 6:17:30.684 pm'!BlElement subclass: #MyChessSquare	instanceVariableNames: 'color name label piece contents board target'	classVariableNames: ''	package: 'Myg-Chess-Core'!!MyChessSquare methodsFor: 'arithmetic' stamp: '2025-10-27T22:00:22.029+01:00'!+ aPoint	| column file |	column := (self column asciiValue + aPoint x) asCharacter asString.	file := (self file asciiValue + aPoint y) asCharacter asString.	^ board at: column , file ifAbsent: [ ^ nil ]! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.031+01:00'!board	^ board! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.032+01:00'!board: aMyChessBoard 		board := aMyChessBoard! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.034+01:00'!color	^ color! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.035+01:00'!color: anObject	color := anObject! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.037+01:00'!column		^ name first! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.038+01:00'!contents	^ contents! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-29T17:44:46.549+01:00'!contents: aPiece	| text |	contents := aPiece.	"⭐ REMETTRE TEMPORAIREMENT pour que les tests passent"	text := contents		ifNil: [ 			color isBlack				ifFalse: [ 'z' ]				ifTrue: [ 'x' ] ]		ifNotNil: [ contents renderPieceOn: self ].		piece text: (text asRopedText			 fontSize: 48;			 foreground: self foreground;			 fontName: MyOpenChessDownloadedFont new familyName)! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.043+01:00'!file		^ name second! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.044+01:00'!foreground				^ color isBlack		ifTrue: [ board blackColor ]		ifFalse: [ board whiteColor ]! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.05+01:00'!left	^ self + (-1 @ 0)! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.052+01:00'!name	^ name! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.053+01:00'!name: aString	name := aString.	label text: (name asRopedText foreground: color negated)! !!MyChessSquare methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.068+01:00'!right		^ self + (1@0)! !!MyChessSquare methodsFor: 'initialization' stamp: '2025-10-27T22:00:22.033+01:00'!click	board click: self! !!MyChessSquare methodsFor: 'initialization' stamp: '2025-10-29T13:32:01.159+01:00'!initialize	super initialize.	target := BlElement new		  geometry: BlCircleGeometry new;		  background: (Color gray alpha: 0.3).	self layout: BlFrameLayout new.	label := BlTextElement new.	label constraintsDo: [ :c | c padding: (BlInsets all: 3) ].	piece := BlTextElement new.	piece text: '' asRopedText.	piece constraintsDo: [ :c |		c frame horizontal alignCenter.		c frame vertical alignCenter ].	self		addChild: label;		addChild: piece.	self		background: Color white;		geometry: BlSquareGeometry new. "Initialiser avec EmptyPiece"    self contents: MyChessEmptyPiece new.	self addEventHandlerOn: BlClickEvent do: [ :e | self click ]! !!MyChessSquare methodsFor: 'initialization' stamp: '2025-10-27T22:00:22.069+01:00'!select		self border: Color green! !!MyChessSquare methodsFor: 'initialization' stamp: '2025-10-27T22:00:22.07+01:00'!unselect	self border: BlBorder empty! !!MyChessSquare methodsFor: 'api - configuration' stamp: '2025-10-27T22:00:22.042+01:00'!down	^ self + (0 @ -1)! !!MyChessSquare methodsFor: 'asd' stamp: '2025-10-29T18:16:56.86+01:00'!emptyContents     self contents: MyChessEmptyPiece new! !!MyChessSquare methodsFor: 'testing' stamp: '2025-10-29T18:08:18.248+01:00'!hasPiece    "⭐ REMETTRE TEMPORAIREMENT le nil check"    ^ contents isNil not! !!MyChessSquare methodsFor: 'highlighting' stamp: '2025-10-27T22:00:22.045+01:00'!highlightTarget	self addChild: target! !!MyChessSquare methodsFor: 'highlighting' stamp: '2025-10-27T22:00:22.07+01:00'!unhighlightTarget	self removeChild: target! !!MyChessSquare methodsFor: 'printing' stamp: '2025-10-27T22:00:22.054+01:00'!printOn: aStream	"Generate a string representation of the receiver based on its instance variables."	super printOn: aStream.	aStream		nextPutAll: ' name: ';		print: name! !!MyChessSquare methodsFor: 'rendering' stamp: '2025-10-27T22:00:22.056+01:00'!renderBishop: aPiece	^ aPiece isWhite		  ifTrue: [			  color isBlack				  ifFalse: [ 'B' ]				  ifTrue: [ 'b' ] ]		  ifFalse: [			  color isBlack				  ifFalse: [ 'V' ]				  ifTrue: [ 'v' ] ]! !!MyChessSquare methodsFor: 'rendering' stamp: '2025-10-27T22:00:22.058+01:00'!renderKing: aPiece	^ aPiece isWhite		  ifFalse: [			  color isBlack				  ifFalse: [ 'L' ]				  ifTrue: [ 'l' ] ]		  ifTrue: [			  color isBlack				  ifFalse: [ 'K' ]				  ifTrue: [ 'k' ] ]! !!MyChessSquare methodsFor: 'rendering' stamp: '2025-10-27T22:00:22.059+01:00'!renderKnight: aPiece	^ aPiece isWhite		  ifFalse: [ color isBlack				  ifFalse: [ 'M' ]				  ifTrue: [ 'm' ] ]		  ifTrue: [			  color isBlack				  ifFalse: [ 'N' ]				  ifTrue: [ 'n' ] ]! !!MyChessSquare methodsFor: 'rendering' stamp: '2025-10-27T22:00:22.06+01:00'!renderPawn: aPiece	^ aPiece isWhite		  ifFalse: [			  color isBlack				  ifFalse: [ 'O' ]				  ifTrue: [ 'o' ] ]		  ifTrue: [			  color isBlack				  ifFalse: [ 'P' ]				  ifTrue: [ 'p' ] ]! !!MyChessSquare methodsFor: 'rendering' stamp: '2025-10-27T22:00:22.061+01:00'!renderQueen: aPiece	^ aPiece isWhite		  ifFalse: [			  color isBlack				  ifFalse: [ 'W' ]				  ifTrue: [ 'w' ] ]		  ifTrue: [			  color isBlack				  ifFalse: [ 'Q' ]				  ifTrue: [ 'q' ] ]! !!MyChessSquare methodsFor: 'rendering' stamp: '2025-10-27T22:00:22.068+01:00'!renderRook: aPiece	^ aPiece isWhite		  ifFalse: [			  color isBlack				  ifFalse: [ 'T' ]				  ifTrue: [ 't' ] ]		  ifTrue: [			  color isBlack				  ifFalse: [ 'R' ]				  ifTrue: [ 'r' ] ]! !!MyChessSquare methodsFor: 'instance creation' stamp: '2025-10-27T22:00:22.071+01:00'!up		^ self + (0@1)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MyChessSquare class	instanceVariableNames: ''!!MyChessSquare class methodsFor: 'api - text weight' stamp: '2025-10-27T22:00:22.025+01:00'!black	^ self color: Color black! !!MyChessSquare class methodsFor: 'api - text weight' stamp: '2025-10-27T22:00:22.026+01:00'!color: aColor	^ self basicNew		  color: aColor;		  initialize;		  yourself! !!MyChessSquare class methodsFor: 'api - text weight' stamp: '2025-10-27T22:00:22.028+01:00'!white	^ self color: Color white! !