'From Pharo13.1.0SNAPSHOT of 20 October 2025 [Build information: Pharo-13.1.0+SNAPSHOT.build.707.sha.0d6f109a1a2d906ac9f69ca41e56c022b584bdfd (64 Bit)] on 30 October 2025 at 12:09:04.575 pm'!MyPiece subclass: #MyKing	instanceVariableNames: ''	classVariableNames: ''	package: 'Myg-Chess-Core'!!MyKing methodsFor: 'as yet unclassified' stamp: '2025-10-27T22:00:22.072+01:00'!attackingSquares	^ self basicTargetSquares! !!MyKing methodsFor: 'rendering' stamp: '2025-10-30T11:04:45.26+01:00'!basicTargetSquares	"The king can move one square on each direction including diagonals"	^ {		square right.        "← Appeler directement, MyChessEmptyPiece gère les bords"		square up right.		square up.		square up left. 		square left.		square down left.		square down.		square down right	} select: #notNil  "FILTRER les nil à la fin"! !!MyKing methodsFor: 'rendering' stamp: '2025-10-27T22:00:22.077+01:00'!renderPieceOn: aSquare	^ aSquare renderKing: self! !!MyKing methodsFor: 'rendering' stamp: '2025-10-29T19:12:13.105+01:00'!targetSquaresLegal: aBoolean	"The king cannot move to threatened squares"	| threatenedSquares |	threatenedSquares := self opponentPieces flatCollect: [ :e |		                     e attackingSquares ].	^ self basicTargetSquares select: [ :s |    s notNil and: [  "← REMPLACER CE notNil"      (threatenedSquares includes: s) not and: [          s hasPiece not or: [             s contents color ~= color and: [               threatenedSquares includes: s ] ] ] ] ]! !!MyKing methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.074+01:00'!id		^ 'K'! !!MyKing methodsFor: 'accessing' stamp: '2025-10-27T22:00:22.077+01:00'!opponentPieces	^ self board pieces select: [ :e |		  e notNil and: [ e color = color negated ] ]! !!MyKing methodsFor: 'testing' stamp: '2025-10-27T22:00:22.074+01:00'!isCheckMated	"We check if the opponent pieces target all my potential movements and myself"	| threatenedSquares |	threatenedSquares := self opponentPieces flatCollect: [ :e |		                     e attackingSquares ].	^ self legalTargetSquares isEmpty and: [		  threatenedSquares includes: self square ]! !!MyKing methodsFor: 'testing' stamp: '2025-10-27T22:00:22.074+01:00'!isInCheck	"We check if the opponent pieces target all my potential movements and myself"	| threatenedSquares |	threatenedSquares := self opponentPieces flatCollect: [ :e |		                     e attackingSquares ].	^ threatenedSquares includes: self square! !!MyKing methodsFor: 'testing' stamp: '2025-10-27T22:00:22.076+01:00'!isKing		^ true! !